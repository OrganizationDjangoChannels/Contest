# Generated by Django 5.0.1 on 2024-02-07 09:49

import ContestApp.services.files
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProfileModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=32, null=True)),
                ('points', models.IntegerField(default=0)),
                ('solved_tasks', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='TaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(null=True)),
                ('level', models.IntegerField(default=0)),
                ('langs', models.CharField(max_length=255, null=True)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ContestApp.profilemodel')),
            ],
            options={
                'db_table': 'task',
            },
        ),
        migrations.CreateModel(
            name='SolutionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(null=True, upload_to=ContestApp.services.files.upload_program_path)),
                ('lang', models.CharField(max_length=255, null=True)),
                ('points', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('passed', 'passed'), ('failed', 'failed')], max_length=6, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ContestApp.taskmodel')),
            ],
            options={
                'db_table': 'solution',
            },
        ),
        migrations.CreateModel(
            name='AttemptModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt_number', models.IntegerField(default=0)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ContestApp.profilemodel')),
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ContestApp.taskmodel')),
            ],
            options={
                'db_table': 'attempt',
            },
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('passed', 'passed'), ('failed', 'failed')], max_length=6, null=True)),
                ('file', models.FileField(null=True, upload_to=ContestApp.services.files.upload_program_path)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ContestApp.taskmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
